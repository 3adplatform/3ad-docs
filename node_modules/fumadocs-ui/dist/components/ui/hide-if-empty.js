'use client';
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Slot } from '@radix-ui/react-slot';
import { useEffect, useId, useRef, useState } from 'react';
const init = `function isEmpty(node) {
  for (let i = 0; i < node.childNodes.length; i++) {
    const child = node.childNodes.item(i);
    if (child.nodeType === Node.TEXT_NODE) {
      return false
    } else if (
      child.nodeType === Node.ELEMENT_NODE &&
      window.getComputedStyle(child).display !== 'none'
    ) {
      return false
    }
  }

  return true;
}`;
const isEmpty = eval(`${init}; isEmpty`);
/**
 * The built-in CSS `:empty` selector cannot detect if the children is hidden, classes such as `md:hidden` causes it to fail.
 * This component is an enhancement to `empty:hidden` to fix the issue described above.
 *
 * This can be expensive, please avoid this whenever possible.
 */
export function HideIfEmpty({ children }) {
    const id = useId();
    const ref = useRef(null);
    const [empty, setEmpty] = useState();
    useEffect(() => {
        const element = ref.current;
        if (!element)
            return;
        const onUpdate = () => {
            setEmpty(isEmpty(element));
        };
        const observer = new ResizeObserver(onUpdate);
        observer.observe(element);
        onUpdate();
        return () => {
            observer.disconnect();
        };
    }, []);
    const inject = `
${init}
const element = document.querySelector('[data-hide-if-empty="${id}"]')
if (element) {
  element.setAttribute('data-empty', String(isEmpty(element)))
}`;
    return (_jsxs(_Fragment, { children: [empty === undefined && _jsx("script", { children: `{ ${inject} }` }), _jsx(Slot, { ref: ref, "data-hide-if-empty": id, "data-empty": empty, className: "data-[empty=true]:hidden", children: children })] }));
}
