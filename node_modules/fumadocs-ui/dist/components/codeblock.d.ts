import { type HTMLAttributes, type ReactNode } from 'react';
export type CodeBlockProps = HTMLAttributes<HTMLElement> & {
    /**
     * Icon of code block
     *
     * When passed as a string, it assumes the value is the HTML of icon
     */
    icon?: ReactNode;
    /**
     * Allow to copy code with copy button
     *
     * @defaultValue true
     */
    allowCopy?: boolean;
    /**
     * Keep original background color generated by Shiki or Rehype Code
     *
     * @defaultValue false
     */
    keepBackground?: boolean;
    viewportProps?: HTMLAttributes<HTMLElement>;
    /**
     * show line numbers
     */
    'data-line-numbers'?: boolean;
    /**
     * @defaultValue 1
     */
    'data-line-numbers-start'?: number;
};
export declare const Pre: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLPreElement> & import("react").RefAttributes<HTMLPreElement>>;
export declare const CodeBlock: import("react").ForwardRefExoticComponent<HTMLAttributes<HTMLElement> & {
    /**
     * Icon of code block
     *
     * When passed as a string, it assumes the value is the HTML of icon
     */
    icon?: ReactNode;
    /**
     * Allow to copy code with copy button
     *
     * @defaultValue true
     */
    allowCopy?: boolean;
    /**
     * Keep original background color generated by Shiki or Rehype Code
     *
     * @defaultValue false
     */
    keepBackground?: boolean;
    viewportProps?: HTMLAttributes<HTMLElement>;
    /**
     * show line numbers
     */
    'data-line-numbers'?: boolean;
    /**
     * @defaultValue 1
     */
    'data-line-numbers-start'?: number;
} & import("react").RefAttributes<HTMLElement>>;
//# sourceMappingURL=codeblock.d.ts.map