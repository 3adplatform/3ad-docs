import { type HTMLAttributes, type ReactNode } from 'react';
import type { SortedResult } from 'fumadocs-core/server';
export type SearchLink = [name: string, href: string];
type ReactSortedResult = Omit<SortedResult, 'content'> & {
    external?: boolean;
    content: ReactNode;
};
export interface SharedProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    /**
     * Custom links to be displayed if search is empty
     */
    links?: SearchLink[];
}
interface SearchDialogProps extends SharedProps {
    search: string;
    onSearchChange: (v: string) => void;
    isLoading?: boolean;
    hideResults?: boolean;
    results: ReactSortedResult[] | 'empty';
    footer?: ReactNode;
}
export declare function SearchDialog({ open, onOpenChange, footer, links, search, onSearchChange, isLoading, ...props }: SearchDialogProps): import("react/jsx-runtime").JSX.Element;
export interface TagItem {
    name: string;
    value: string | undefined;
    props?: HTMLAttributes<HTMLButtonElement>;
}
export interface TagsListProps extends HTMLAttributes<HTMLDivElement> {
    tag?: string;
    onTagChange: (tag: string | undefined) => void;
    allowClear?: boolean;
    items: TagItem[];
}
export declare function TagsList({ tag, onTagChange, items, allowClear, ...props }: TagsListProps): import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=search.d.ts.map