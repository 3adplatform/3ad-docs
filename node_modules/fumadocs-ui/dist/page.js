import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { forwardRef, lazy } from 'react';
import { AnchorProvider } from 'fumadocs-core/toc';
import { slot } from './layouts/shared.js';
import { cn } from './utils/cn.js';
import { Breadcrumb, Footer, LastUpdate, PageArticle, PageBody, TocPopover, TocPopoverContent, TocPopoverTrigger, } from './page-client.js';
import { Toc, TOCItems, TOCScrollArea, } from './components/layout/toc.js';
import { buttonVariants } from './components/ui/button.js';
import { Edit, Text } from './icons.js';
import { I18nLabel } from './contexts/i18n.js';
const ClerkTOCItems = lazy(() => import('./components/layout/toc-clerk.js'));
export function DocsPage({ toc = [], full = false, editOnGithub, tableOfContentPopover: { enabled: tocPopoverEnabled, component: tocPopoverReplace, ...tocPopoverOptions } = {}, tableOfContent: { enabled: tocEnabled, component: tocReplace, ...tocOptions } = {}, ...props }) {
    const isTocRequired = toc.length > 0 ||
        tocOptions.footer !== undefined ||
        tocOptions.header !== undefined;
    // disable TOC on full mode, you can still enable it with `enabled` option.
    tocEnabled ?? (tocEnabled = !full && isTocRequired);
    tocPopoverEnabled ?? (tocPopoverEnabled = toc.length > 0 ||
        tocPopoverOptions.header !== undefined ||
        tocPopoverOptions.footer !== undefined);
    return (_jsxs(AnchorProvider, { toc: toc, single: tocOptions.single, children: [_jsxs(PageBody, { ...props.container, className: cn(props.container?.className), style: {
                    '--fd-tocnav-height': !tocPopoverEnabled ? '0px' : undefined,
                    ...props.container?.style,
                }, children: [slot({ enabled: tocPopoverEnabled, component: tocPopoverReplace }, _jsxs(TocPopover, { className: "h-10", children: [_jsx(TocPopoverTrigger, { className: "w-full", items: toc }), _jsxs(TocPopoverContent, { children: [tocPopoverOptions.header, _jsx(TOCScrollArea, { className: "px-4 md:px-6", children: tocPopoverOptions.style === 'clerk' ? (_jsx(ClerkTOCItems, { items: toc })) : (_jsx(TOCItems, { items: toc })) }), tocPopoverOptions.footer] })] }), {
                        items: toc,
                        ...tocPopoverOptions,
                    }), _jsxs(PageArticle, { ...props.article, className: cn(full || !tocEnabled ? 'max-w-[1120px]' : 'max-w-[860px]', props.article?.className), children: [slot(props.breadcrumb, _jsx(Breadcrumb, { ...props.breadcrumb })), props.children, _jsx("div", { role: "none", className: "flex-1" }), _jsxs("div", { className: "flex flex-row flex-wrap items-center justify-between gap-4 empty:hidden", children: [editOnGithub && (_jsx(EditOnGitHub, { href: `https://github.com/${editOnGithub.owner}/${editOnGithub.repo}/blob/${editOnGithub.sha}/${editOnGithub.path.startsWith('/') ? editOnGithub.path.slice(1) : editOnGithub.path}` })), props.lastUpdate && (_jsx(LastUpdate, { date: new Date(props.lastUpdate) }))] }), slot(props.footer, _jsx(Footer, { items: props.footer?.items }))] })] }), slot({ enabled: tocEnabled, component: tocReplace }, _jsxs(Toc, { children: [tocOptions.header, _jsxs("h3", { className: "inline-flex items-center gap-1.5 text-sm text-fd-muted-foreground", children: [_jsx(Text, { className: "size-4" }), _jsx(I18nLabel, { label: "toc" })] }), _jsx(TOCScrollArea, { children: tocOptions.style === 'clerk' ? (_jsx(ClerkTOCItems, { items: toc })) : (_jsx(TOCItems, { items: toc })) }), tocOptions.footer] }), {
                items: toc,
                ...tocOptions,
            })] }));
}
export function EditOnGitHub(props) {
    return (_jsx("a", { target: "_blank", rel: "noreferrer noopener", ...props, className: cn(buttonVariants({
            color: 'secondary',
            size: 'sm',
            className: 'gap-1.5 not-prose',
        }), props.className), children: props.children ?? (_jsxs(_Fragment, { children: [_jsx(Edit, { className: "size-3.5" }), _jsx(I18nLabel, { label: "editOnGithub" })] })) }));
}
/**
 * Add typography styles
 */
export const DocsBody = forwardRef((props, ref) => (_jsx("div", { ref: ref, ...props, className: cn('prose', props.className), children: props.children })));
DocsBody.displayName = 'DocsBody';
export const DocsDescription = forwardRef((props, ref) => {
    // don't render if no description provided
    if (props.children === undefined)
        return null;
    return (_jsx("p", { ref: ref, ...props, className: cn('mb-8 text-lg text-fd-muted-foreground', props.className), children: props.children }));
});
DocsDescription.displayName = 'DocsDescription';
export const DocsTitle = forwardRef((props, ref) => {
    return (_jsx("h1", { ref: ref, ...props, className: cn('text-3xl font-semibold', props.className), children: props.children }));
});
DocsTitle.displayName = 'DocsTitle';
/**
 * For separate MDX page
 */
export function withArticle(props) {
    return (_jsx("main", { ...props, className: cn('container py-12', props.className), children: _jsx("article", { className: "prose", children: props.children }) }));
}
