'use client';
import { jsx as _jsx } from "react/jsx-runtime";
import { cn } from '../utils/cn.js';
import { useSidebar } from '../contexts/sidebar.js';
import { useNav } from '../contexts/layout.js';
import { buttonVariants } from '../components/ui/button.js';
import { Menu } from '../icons.js';
import Link from 'fumadocs-core/link';
import { usePathname } from 'fumadocs-core/framework';
import { isActive } from '../utils/is-active.js';
export function Navbar({ mode, ...props }) {
    const { open, collapsed } = useSidebar();
    const { isTransparent } = useNav();
    return (_jsx("header", { id: "nd-subnav", ...props, className: cn('fixed inset-x-0 top-(--fd-banner-height) z-10 px-(--fd-layout-offset) backdrop-blur-sm transition-colors', (!isTransparent || open) && 'bg-fd-background/80', mode === 'auto' &&
            !collapsed &&
            'ps-[calc(var(--fd-layout-offset)+var(--fd-sidebar-width))]', props.className), children: props.children }));
}
export function NavbarSidebarTrigger(props) {
    const { setOpen } = useSidebar();
    return (_jsx("button", { ...props, className: cn(buttonVariants({
            color: 'ghost',
            size: 'icon',
        }), props.className), onClick: () => setOpen((prev) => !prev), children: _jsx(Menu, {}) }));
}
export function LayoutTabs(props) {
    return (_jsx("div", { ...props, className: cn('flex flex-row items-end gap-6 overflow-auto', props.className), children: props.children }));
}
function useIsSelected(item) {
    const pathname = usePathname();
    return item.urls
        ? item.urls.has(pathname.endsWith('/') ? pathname.slice(0, -1) : pathname)
        : isActive(item.url, pathname, true);
}
export function LayoutTab(item) {
    const { closeOnRedirect } = useSidebar();
    const selected = useIsSelected(item);
    return (_jsx(Link, { className: cn('inline-flex items-center py-2.5 border-b border-transparent gap-2 text-fd-muted-foreground text-sm text-nowrap', selected && 'text-fd-foreground font-medium border-fd-primary'), href: item.url, onClick: () => {
            closeOnRedirect.current = false;
        }, children: item.title }));
}
