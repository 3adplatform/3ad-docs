// src/highlight/shiki.ts
import { toJsxRuntime } from "hast-util-to-jsx-runtime";
import { Fragment } from "react";
import { jsx, jsxs } from "react/jsx-runtime";
var defaultThemes = {
  light: "github-light",
  dark: "github-dark"
};
var highlighters = /* @__PURE__ */ new Map();
async function _highlight(code, options) {
  const { lang, components: _, engine, ...rest } = options;
  let themes = { themes: defaultThemes };
  if ("theme" in options && options.theme) {
    themes = { theme: options.theme };
  } else if ("themes" in options && options.themes) {
    themes = { themes: options.themes };
  }
  const highlighter = await getHighlighter("custom", {
    engine,
    langs: [lang],
    themes: "theme" in themes ? [themes.theme] : Object.values(themes.themes).filter((v) => v !== void 0)
  });
  return highlighter.codeToHast(code, {
    lang,
    ...rest,
    ...themes,
    defaultColor: "themes" in themes ? false : void 0
  });
}
function _renderHighlight(hast, options) {
  return toJsxRuntime(hast, {
    jsx,
    jsxs,
    development: false,
    components: options?.components,
    Fragment
  });
}
async function getHighlighter(engineType, options) {
  const { createHighlighter } = await import("shiki");
  let highlighter = highlighters.get(engineType);
  if (!highlighter) {
    let engine;
    if (engineType === "js") {
      engine = import("shiki/engine/javascript").then(
        (res) => res.createJavaScriptRegexEngine()
      );
    } else if (engineType === "oniguruma" || !options.engine) {
      engine = import("shiki/engine/oniguruma").then(
        (res) => res.createOnigurumaEngine(import("shiki/wasm"))
      );
    } else {
      engine = options.engine;
    }
    highlighter = createHighlighter({
      ...options,
      engine
    });
    highlighters.set(engineType, highlighter);
    return highlighter;
  }
  return highlighter.then(async (instance) => {
    await Promise.all([
      // @ts-expect-error unknown
      instance.loadLanguage(...options.langs),
      // @ts-expect-error unknown
      instance.loadTheme(...options.themes)
    ]);
    return instance;
  });
}
async function highlight(code, options) {
  return _renderHighlight(await _highlight(code, options), options);
}

export {
  defaultThemes,
  _highlight,
  _renderHighlight,
  getHighlighter,
  highlight
};
