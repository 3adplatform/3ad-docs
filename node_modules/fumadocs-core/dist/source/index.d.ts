import { ReactElement } from 'react';
import { I as I18nConfig } from '../config-Cm58P4fz.js';
import { R as Root, I as Item, F as Folder$1, S as Separator } from '../page-tree-bSt6K__E.js';

interface FileInfo {
    /**
     * File path without extension
     *
     * @deprecated obtain it with `join(dirname, name)`
     */
    flattenedPath: string;
    /**
     * path of file (unparsed)
     */
    path: string;
    /**
     * File name without extension
     */
    name: string;
    /**
     * file extension from the last `.`, like `.md`
     *
     * empty string if no file extension
     */
    ext: string;
    dirname: string;
}
interface FolderInfo {
    /**
     * Original path of folder
     */
    path: string;
    /**
     * folder name
     */
    name: string;
    dirname: string;
}
declare function parseFilePath(path: string): FileInfo;
declare function parseFolderPath(path: string): FolderInfo;

interface LoadOptions {
    transformers?: Transformer[];
    getSlugs: (info: FileInfo) => string[];
}
interface VirtualFile {
    /**
     * Relative path
     *
     * @example `docs/page.mdx`
     */
    path: string;
    type: 'page' | 'meta';
    /**
     * Specified Slugs for page
     */
    slugs?: string[];
    data: unknown;
}
type Transformer = (context: {
    storage: Storage;
    options: LoadOptions;
}) => void;
declare function loadFiles<O extends LoadOptions>(files: VirtualFile[], options: O): Storage;

interface LoaderConfig {
    source: SourceConfig;
    i18n: boolean;
}
interface SourceConfig {
    pageData: PageData;
    metaData: MetaData;
}
interface LoaderOptions<T extends SourceConfig = SourceConfig, I18n extends I18nConfig | undefined = I18nConfig | undefined> {
    baseUrl: string;
    icon?: NonNullable<BaseOptions['resolveIcon']>;
    slugs?: LoadOptions['getSlugs'];
    url?: UrlFn;
    source: Source<T>;
    transformers?: Transformer[];
    /**
     * Additional options for page tree builder
     */
    pageTree?: Partial<BaseOptions<T['pageData'], T['metaData']>>;
    /**
     * Configure i18n
     */
    i18n?: I18n;
}
interface Source<Config extends SourceConfig> {
    /**
     * @internal
     */
    _config?: Config;
    files: VirtualFile[] | (() => VirtualFile[]);
}
interface Page<Data = PageData> {
    /**
     * Virtualized file path
     */
    file: FileInfo;
    slugs: string[];
    url: string;
    data: Data;
    locale?: string | undefined;
}
interface Meta<Data = MetaData> {
    /**
     * Virtualized file path
     */
    file: FileInfo;
    data: Data;
}
interface LanguageEntry<Data = PageData> {
    language: string;
    pages: Page<Data>[];
}
interface LoaderOutput<Config extends LoaderConfig> {
    pageTree: Config['i18n'] extends true ? Record<string, Root> : Root;
    getPageTree: (locale?: string) => Root;
    getPageByHref: (href: string, options?: {
        /**
         * resolve relative file paths in `href` from specified dirname, must be a virtual path.
         */
        dir?: string;
    }) => {
        page: Page<Config['source']['pageData']>;
        hash?: string;
    } | undefined;
    _i18n?: I18nConfig;
    /**
     * Get list of pages from language
     *
     * @param language - If empty, the default language will be used
     */
    getPages: (language?: string) => Page<Config['source']['pageData']>[];
    getLanguages: () => LanguageEntry<Config['source']['pageData']>[];
    /**
     * Get page with slugs
     *
     * @param language - If empty, the default language will be used
     */
    getPage: (slugs: string[] | undefined, language?: string) => Page<Config['source']['pageData']> | undefined;
    getNodePage: (node: Item, language?: string) => Page<Config['source']['pageData']> | undefined;
    getNodeMeta: (node: Folder$1, language?: string) => Meta<Config['source']['metaData']> | undefined;
    /**
     * generate static params for Next.js SSG
     *
     * @param slug - customise parameter name for slugs
     * @param lang - customise parameter name for lang
     */
    generateParams: <TSlug extends string = 'slug', TLang extends string = 'lang'>(slug?: TSlug, lang?: TLang) => (Record<TSlug, string[]> & Record<TLang, string>)[];
}
declare function createGetUrl(baseUrl: string, i18n?: I18nConfig): UrlFn;
declare function getSlugs(info: FileInfo): string[];
declare function loader<Config extends SourceConfig, I18n extends I18nConfig | undefined = undefined>(options: LoaderOptions<Config, I18n>): LoaderOutput<{
    source: Config;
    i18n: I18n extends I18nConfig ? true : false;
}>;

interface MetaData {
    icon?: string | undefined;
    title?: string | undefined;
    root?: boolean | undefined;
    pages?: string[] | undefined;
    defaultOpen?: boolean | undefined;
    description?: string | undefined;
}
interface PageData {
    icon?: string | undefined;
    title?: string;
    description?: string | undefined;
}
type InferPageType<Utils extends LoaderOutput<any>> = Utils extends LoaderOutput<infer Config> ? Page<Config['source']['pageData']> : never;
type InferMetaType<Utils extends LoaderOutput<any>> = Utils extends LoaderOutput<infer Config> ? Meta<Config['source']['metaData']> : never;
/**
 * @internal
 */
type UrlFn = (slugs: string[], locale?: string) => string;

interface MetaFile<Data extends MetaData = MetaData> {
    file: FileInfo;
    format: 'meta';
    data: Data;
}
interface PageFile<Data extends PageData = PageData> {
    file: FileInfo;
    format: 'page';
    data: {
        slugs: string[];
        data: Data;
    };
}
type File = MetaFile | PageFile;
interface Folder<Page extends PageData = PageData, Meta extends MetaData = MetaData> {
    file: FolderInfo;
    children: (MetaFile<Meta> | PageFile<Page> | Folder<Page, Meta>)[];
}
/**
 * A virtual file system that solves inconsistent behaviours
 *
 * Some source providers may not provide the full file structure, this will cause inconsistent outputs for page builder and other transformers
 */
declare class Storage {
    files: Map<string, File>;
    folders: Map<string, Folder<PageData, MetaData>>;
    private rootFolder;
    constructor();
    /**
     * @param path - flattened path
     * @param format - file format
     */
    read<F extends File['format']>(path: string, format: F): Extract<File, {
        format: F;
    }> | undefined;
    readDir(path: string): Folder | undefined;
    root(): Folder;
    write<F extends File['format']>(path: string, format: F, data: Extract<File, {
        format: F;
    }>['data']): void;
    list(): File[];
    makeDir(path: string): void;
}

type fileSystem_Folder<Page extends PageData = PageData, Meta extends MetaData = MetaData> = Folder<Page, Meta>;
type fileSystem_MetaFile<Data extends MetaData = MetaData> = MetaFile<Data>;
type fileSystem_PageFile<Data extends PageData = PageData> = PageFile<Data>;
type fileSystem_Storage = Storage;
declare const fileSystem_Storage: typeof Storage;
declare namespace fileSystem {
  export { type fileSystem_Folder as Folder, type fileSystem_MetaFile as MetaFile, type fileSystem_PageFile as PageFile, fileSystem_Storage as Storage };
}

interface BaseOptions<Page extends PageData = PageData, Meta extends MetaData = MetaData> {
    /**
     * Remove references to the file path of original nodes (`$ref`)
     *
     * @defaultValue false
     */
    noRef?: boolean;
    attachFile?: (node: Item, file?: PageFile<Page>) => Item;
    attachFolder?: (node: Folder$1, folder: Folder<Page, Meta>, meta?: MetaFile<Meta>) => Folder$1;
    attachSeparator?: (node: Separator) => Separator;
    resolveIcon?: (icon: string | undefined) => ReactElement | undefined;
}
interface BuildPageTreeOptions extends BaseOptions {
    storage: Storage;
}
interface BuildPageTreeOptionsWithI18n extends BaseOptions {
    storages: Record<string, Storage>;
    i18n: I18nConfig;
}
interface PageTreeBuilder {
    build: (options: BuildPageTreeOptions) => Root;
    /**
     * Build page tree and fallback to the default language if the localized page doesn't exist
     */
    buildI18n: (options: BuildPageTreeOptionsWithI18n) => Record<string, Root>;
}
declare function createPageTreeBuilder(getUrl: UrlFn): PageTreeBuilder;

export { type BaseOptions, type BuildPageTreeOptions, type BuildPageTreeOptionsWithI18n, type FileInfo, fileSystem as FileSystem, type FolderInfo, type InferMetaType, type InferPageType, type LanguageEntry, type LoadOptions, type LoaderConfig, type LoaderOptions, type LoaderOutput, type Meta, type MetaData, type Page, type PageData, type PageTreeBuilder, type Source, type SourceConfig, type Transformer, type UrlFn, type VirtualFile, createGetUrl, createPageTreeBuilder, getSlugs, loadFiles, loader, parseFilePath, parseFolderPath };
